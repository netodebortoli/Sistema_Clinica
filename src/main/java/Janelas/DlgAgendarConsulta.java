package Janelas;

import Controle.FuncoesUteis;
import Controle.GerenciadorInterface;
import Dominio.Consulta;
import Dominio.Especialidade;
import Dominio.Medico;
import Dominio.Paciente;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;

public class DlgAgendarConsulta extends javax.swing.JDialog {

    private GerenciadorInterface gerIG;

    /**
     * Creates new form DlgAgendarConsulta
     *
     * @param parent
     * @param modal
     */
    public DlgAgendarConsulta(java.awt.Frame parent, boolean modal, GerenciadorInterface gerIG) {
        super(parent, modal);
        this.gerIG = gerIG;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitulo = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtData = new javax.swing.JFormattedTextField();
        jSeparator1 = new javax.swing.JSeparator();
        btnBuscarConsultas = new javax.swing.JButton();
        pnAgendamentos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAgendamentos = new javax.swing.JTable();
        btnCadastrar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cbPaciente = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cbModalidade = new javax.swing.JComboBox<>();
        btnLimpar = new javax.swing.JToggleButton();
        btnExcluir = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        cbMedico = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sisclinica - Agendar Consulta");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lbTitulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitulo.setText("Agendar Consulta");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Data");

        try {
            txtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btnBuscarConsultas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscarConsultas.setForeground(new java.awt.Color(51, 204, 0));
        btnBuscarConsultas.setText("Buscar Consultas");
        btnBuscarConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarConsultasActionPerformed(evt);
            }
        });

        pnAgendamentos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Agendamentos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        pnAgendamentos.setLayout(new java.awt.BorderLayout());

        tblAgendamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"07h", null, null, null},
                {"08h", null, null, null},
                {"09h", null, null, null},
                {"10h", null, null, null},
                {"11h", null, null, null},
                {"12h", null, null, null},
                {"13h", null, null, null},
                {"14h", null, null, null},
                {"15h", null, null, null},
                {"16h", null, null, null},
                {"17h", null, null, null},
                {"18h", null, null, null}
            },
            new String [] {
                "Horário", "Médico", "Paciente", "Modalidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAgendamentos.setToolTipText("Selecione um horário de consulta disponível");
        tblAgendamentos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblAgendamentos.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        tblAgendamentos.setFocusable(false);
        tblAgendamentos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAgendamentos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAgendamentos.setShowGrid(false);
        tblAgendamentos.setShowHorizontalLines(true);
        tblAgendamentos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblAgendamentos);
        if (tblAgendamentos.getColumnModel().getColumnCount() > 0) {
            tblAgendamentos.getColumnModel().getColumn(0).setResizable(false);
            tblAgendamentos.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblAgendamentos.getColumnModel().getColumn(1).setResizable(false);
            tblAgendamentos.getColumnModel().getColumn(2).setResizable(false);
            tblAgendamentos.getColumnModel().getColumn(3).setResizable(false);
            tblAgendamentos.getColumnModel().getColumn(3).setPreferredWidth(0);
        }

        pnAgendamentos.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        btnCadastrar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCadastrar.setForeground(new java.awt.Color(0, 0, 153));
        btnCadastrar.setText("Cadastrar Consulta");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados para agendamento de consulta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 2, 12))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Paciente");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Modalidade");

        cbModalidade.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbModalidadeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbModalidade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnLimpar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLimpar.setForeground(new java.awt.Color(255, 153, 0));
        btnLimpar.setText("Limpar Campos");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnExcluir.setForeground(new java.awt.Color(255, 0, 0));
        btnExcluir.setText("Excluir Consulta");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Médico");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCadastrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pnAgendamentos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBuscarConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpar)
                    .addComponent(jLabel2)
                    .addComponent(cbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel5))
                    .addComponent(btnBuscarConsultas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnAgendamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void limparCampos() {
        txtData.setText("");
        tblAgendamentos.clearSelection();
        cbPaciente.setSelectedIndex(-1);
        cbMedico.setSelectedIndex(-1);
        cbModalidade.setSelectedIndex(-1);
        limparCamposTabela();
    }

    private boolean validarCamposPreenchidos() {

        boolean validar = true;
        String mensagemErro = "";

        if (cbPaciente.getSelectedItem() == null) {
            validar = false;
            mensagemErro += "Paciente não selecionado.\n";
        }

        if (cbMedico.getSelectedItem() == null) {
            validar = false;
            mensagemErro += "Médico não selecionado.\n";
        }

        if (cbModalidade.getSelectedItem() == null) {
            validar = false;
            mensagemErro += "Modalidade da consulta não selecionada.\n";
        }

        if (tblAgendamentos.getSelectedRow() == -1) {
            validar = false;
            mensagemErro += "Horário de consulta não selecionado.\n";
        }

        if (!validar) {
            JOptionPane.showMessageDialog(this, mensagemErro);
        }
        return validar;
    }

    private boolean validarDataConsulta() {

        if (txtData.getText().replaceAll("/", "").trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "Data não preenchida");
            return false;
        }

        try {
            DateFormat dtForm = new SimpleDateFormat("dd/MM/yyyy");

            // Datal atual do sistema
            Date dataAtualSistema = new Date();
            String dtAtualSistema;
            dtAtualSistema = FuncoesUteis.dateToStr(dataAtualSistema);

            dataAtualSistema = dtForm.parse(dtAtualSistema);

            // Data agendada de uma consulta
            String data = txtData.getText();
            Date dataConsulta = FuncoesUteis.strToDate(data);

            if (dataConsulta.compareTo(dataAtualSistema) >= 0) {
                return true;
            } else {
                JOptionPane.showMessageDialog(this, "Data de consulta inválida.\n"
                        + "Selecione uma data igual ou posterior ao dia atual.");
                return false;
            }

        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao converter data da consulta.\n" + ex);
            return false;
        }
    }

    private void limparDadosCelula(int linha) {
        for (int i = 1; i < tblAgendamentos.getColumnCount(); i++) {
            ((DefaultTableModel) tblAgendamentos.getModel()).setValueAt(null, linha, i);
        }
    }

    private void limparCamposTabela() {
        for (int i = 0; i < tblAgendamentos.getRowCount(); i++) {
            limparDadosCelula(i);
        }
    }

    private void btnBuscarConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarConsultasActionPerformed

        if (validarDataConsulta()) {
            Medico med = (Medico) cbMedico.getSelectedItem();
            try {
                List<Consulta> listaConsultas = gerIG.gerenciadorDominio.pesquisarConsulta(txtData.getText(), med);

                limparCamposTabela();

                if (listaConsultas.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Não há consultas agendadas para o dia informado.\n");
                } else {
                    for (Consulta c : listaConsultas) {
                        for (int j = 0; j < tblAgendamentos.getRowCount(); j++) {
                            if (c.getHorario().equals(tblAgendamentos.getValueAt(j, 0))) {
                                ((DefaultTableModel) tblAgendamentos.getModel()).setValueAt(c.getMedico(), j, 1);
                                ((DefaultTableModel) tblAgendamentos.getModel()).setValueAt(c, j, 2);
                                ((DefaultTableModel) tblAgendamentos.getModel()).setValueAt(c.getEspecialidade(), j, 3);
                            }
                        }
                    }
                }
            } catch (HibernateException | ParseException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao buscar consultas.\n" + ex);
            }
        }
    }//GEN-LAST:event_btnBuscarConsultasActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        if (validarCamposPreenchidos() && validarDataConsulta()) {

            int linhaSelecionada = tblAgendamentos.getSelectedRow();

            if (tblAgendamentos.getValueAt(linhaSelecionada, 1) == null) {

                try {
                    String data = txtData.getText();
                    Date dataConsulta = FuncoesUteis.strToDate(data);

                    Medico medico = (Medico) cbMedico.getSelectedItem();
                    Paciente paciente = (Paciente) cbPaciente.getSelectedItem();
                    Especialidade modalidade = (Especialidade) cbModalidade.getSelectedItem();
                    String horarioConsulta = (String) tblAgendamentos.getValueAt(linhaSelecionada, 0);

                    gerIG.gerenciadorDominio.cadastrarConsulta(dataConsulta, horarioConsulta, medico, paciente, modalidade);

                    limparCampos();
                    JOptionPane.showMessageDialog(this, "Consulta agendada com sucesso.");

                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao cadastrar consulta ao converter data.\n" + ex);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Horário indisponível para consulta.");
            }
        }
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        cbPaciente.setModel(gerIG.carregarComboBox(Paciente.class));
        cbModalidade.setModel(gerIG.carregarComboBox(Especialidade.class));
        cbModalidade.setSelectedIndex(-1);
        cbPaciente.setSelectedIndex(-1);
    }//GEN-LAST:event_formComponentShown

    private void cbModalidadeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbModalidadeItemStateChanged
        if (cbModalidade.getSelectedItem() != null) {
            Especialidade especialidade = (Especialidade) cbModalidade.getSelectedItem();
            List listaMedicos = especialidade.getMedicos();
            cbMedico.setModel(new DefaultComboBoxModel(listaMedicos.toArray()));
        }
    }//GEN-LAST:event_cbModalidadeItemStateChanged

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed

        int linhaSelecionada = tblAgendamentos.getSelectedRow();

        if (linhaSelecionada >= 0) {
            if (tblAgendamentos.getValueAt(linhaSelecionada, 1) != null) {

                Consulta c = (Consulta) tblAgendamentos.getValueAt(linhaSelecionada, 2);

                if (JOptionPane.showConfirmDialog(this,
                        "Deseja realmente excluir a consulta?",
                        "Excluir Consulta", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                    limparDadosCelula(linhaSelecionada);
                    gerIG.gerenciadorDominio.excluir(c);
                    JOptionPane.showMessageDialog(this, "A consulta às " + c.getHorario() + " foi apagada.");
                }

            } else {
                JOptionPane.showMessageDialog(this, "Selecione uma consulta agendada para excluir.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Para excluir, selecione uma consulta da tabela.");
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarConsultas;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JToggleButton btnExcluir;
    private javax.swing.JToggleButton btnLimpar;
    private javax.swing.JComboBox<String> cbMedico;
    private javax.swing.JComboBox<String> cbModalidade;
    private javax.swing.JComboBox<String> cbPaciente;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JPanel pnAgendamentos;
    private javax.swing.JTable tblAgendamentos;
    private javax.swing.JFormattedTextField txtData;
    // End of variables declaration//GEN-END:variables
}
